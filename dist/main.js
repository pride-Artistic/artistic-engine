var ArtisticEngine;(()=>{"use strict";var t={d:(s,e)=>{for(var i in e)t.o(e,i)&&!t.o(s,i)&&Object.defineProperty(s,i,{enumerable:!0,get:e[i]})},o:(t,s)=>Object.prototype.hasOwnProperty.call(t,s),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},s={};t.r(s),t.d(s,{Engine:()=>u,Entity:()=>n,Sprite:()=>a,Vector:()=>e});var e={};t.r(e),t.d(e,{Vector2D:()=>r,Vector3D:()=>c,Vector4D:()=>m});class i{constructor(...t){this.values=[...t],this.size=t.length}get Size(){return this.size}copy(t,s=!1){if(this.size>t.size&&!s)throw new Error(`Copying vector of size ${this.size} to ${t.size} will cause data loss.\nInclude force option if intended.`);return t.overwrite(this.values),t}isequal(t,s){if(this.size!==t.size)return!1;const e=this.values.slice(),i=t.values.slice();return e.every(((t,e)=>null==s?t==i[e]:t.toFixed(s)==i[e].toFixed(s)))}shift(t=1){t%=this.size;const s=this.values.slice(0,-t);return s.unshift(...this.values.slice(-t)),this.values=s,this}overwrite(t){let s=0;this.values=this.values.map((function(){return t[s++]||0}))}}class r extends i{constructor(t=0,s=0){super(t,s)}get X(){return this.values[0]}get Y(){return this.values[1]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}}class n{constructor(t){var s,e,i,n;this.children=[],this.parent=null,this.dimension=new r,this.position=new r,t&&(this.dimension.X=null!==(s=t.W)&&void 0!==s?s:0,this.dimension.Y=null!==(e=t.H)&&void 0!==e?e:0,this.position.X=null!==(i=t.X)&&void 0!==i?i:0,this.position.Y=null!==(n=t.Y)&&void 0!==n?n:0)}get Position(){return this.position}get X(){return this.position.X}get Y(){return this.position.Y}get AbsoluteX(){var t,s;return(null!==(s=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteX)&&void 0!==s?s:0)+this.position.X}get AbsoluteY(){var t,s;return(null!==(s=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteY)&&void 0!==s?s:0)+this.position.Y}get Dimension(){return this.dimension}get W(){return this.dimension.X}get H(){return this.dimension.Y}get Width(){return this.dimension.X}get Height(){return this.dimension.Y}get Parent(){return this.parent}get Children(){return this.children.slice()}set Position(t){this.position=t}set X(t){this.position.X=t}set Y(t){this.position.Y=t}set Dimension(t){this.dimension=t}set W(t){this.dimension.X=t}set H(t){this.dimension.Y=t}set Width(t){this.dimension.X=t}set Height(t){this.dimension.Y=t}attachChildren(t,s=1/0){var e;let i=-1;if(Array.isArray(t)){const e=Math.max(0,Math.min(s,this.children.length));for(let s=0;s<t.length;s++)i=this.attachChildren(t[s],e+s)}else{for(let s=this;null!==s;s=s.parent)if(s===t)throw new Error("Loop of parent-child relationships detected.");null===(e=t.parent)||void 0===e||e.detachChildren(t),this.children.push(t),t.parent=this,i=this.setChildIndex(t,s)}return i}detachChildren(t){if(Array.isArray(t))for(const s of t)this.detachChildren(s);else{const s=this.children.indexOf(t);s>-1&&(this.children.splice(s,1),t.parent=null)}}getChildIndex(t){return this.children.indexOf(t)}setChildIndex(t,s){const e=this.getChildIndex(t);if(-1===e)throw new Error("I AM NOT YOUR FATHER");this.children.splice(e,1);const i=Math.max(0,Math.min(s,this.children.length));return this.children.splice(i,0,t),i}setParent(t=null){var s;null==t?null===(s=this.parent)||void 0===s||s.detachChildren(this):t.attachChildren(this)}}const h=t=>{if(null!=t.reset)return!0;t.save();let s=0;const e=t.save,i=t.restore;return t.save=function(){e.call(this),s++},t.restore=function(){s>0&&(i.call(this),s--)},t.reset=function(){!function(t){for(let e=s;e>-1;e--)i.call(t);s=-1}(t),this.moveTo(0,0),this.beginPath(),this.closePath(),this.resetTransform(),this.clearRect(0,0,this.canvas.width,this.canvas.height),this.save()},!1};class o{constructor(t=1,s=0,e=0,i=1,r=0,n=0){this.values=[t,s,e,i,r,n]}get m11(){return this.values[0]}get m12(){return this.values[1]}get m21(){return this.values[2]}get m22(){return this.values[3]}get ox(){return this.values[4]}get oy(){return this.values[5]}get Determinant(){return this.m11*this.m22-this.m12*this.m21}get isInvertible(){return 0!==this.Determinant}get isIdentity(){return 1===this.m11&&1===this.m22&&0===this.m12&&0===this.m21&&0===this.ox&&0===this.oy}set m11(t){this.values[0]=t}set m12(t){this.values[1]=t}set m21(t){this.values[2]=t}set m22(t){this.values[3]=t}set ox(t){this.values[4]=t}set oy(t){this.values[5]=t}translate(t,s){return this.ox+=t,this.oy+=s,this}scale(t,s){return void 0===s?this.scale(t,t):([0,1,4].forEach((s=>{this.values[s]*=t})),[2,3,5].forEach((t=>{this.values[t]*=s})),this)}linear(t,s,e,i,r,n){return this.values=[this.m11*t+this.m12*e,this.m11*s+this.m12*i,this.m21*t+this.m22*e,this.m21*s+this.m22*i,this.m11*r+this.m12*n+this.ox,this.m21*r+this.m22*n+this.oy],this}rotate(t){t=t*Math.PI/180;const s=Math.sin(t),e=Math.cos(t);return this.linear(e,s,-s,e,0,0)}apply(t,s){let e;if(t instanceof r)e=t,s=t.Y,t=t.X,e.X=this.m11*t+this.m12*s+this.ox,e.Y=this.m21*t+this.m22*s+this.oy;else{if(void 0===s)throw new Error("Camera#apply method requires two number parameters or one Vector2D.");e=new r(this.m11*t+this.m12*s+this.ox,this.m21*t+this.m22*s+this.oy)}return e}multiply(t){return this.linear(...t.values)}invert(){const t=this.Determinant;if(0===t)throw new Error("This transform is not invertible");const s=this.m22/t,e=-1*this.m12/t,i=(this.m12*this.oy-this.m22*this.ox)/t,r=-1*this.m21/t,n=this.m11/t,h=-1*(this.m11*this.oy-this.m21*this.ox)/t;return this.m11=s,this.m12=e,this.ox=i,this.m21=r,this.m22=n,this.oy=h,this}copy(){return new o(...this.values)}toDOM(){return new DOMMatrix([this.m11,this.m21,this.m12,this.m22,this.ox,this.oy])}}class a extends n{constructor(){super(...arguments),this.transform=new o,this.draw=(t,s)=>{t.save(),this.region&&(this.beforeClip(t,s),t.translate(this.AbsoluteX,this.AbsoluteY),t.transform(this.transform.m11,this.transform.m21,this.transform.m12,this.transform.m22,this.transform.ox,this.transform.oy),t.beginPath(),t.rect(0,0,this.region.Width,this.region.Height),t.clip()),this.onDraw(t,s),t.restore(),this.afterRestore(t,s);for(const e of this.Children)e instanceof a&&e.draw(t,s)}}get Transform(){return this.transform}get Region(){return this.region}get isSelfRegion(){return this.region===this}set Transform(t){this.transform=t}set Region(t){this.region=t}beforeClip(t,s){}afterRestore(t,s){}resetTransform(){this.transform=new o}}class l extends a{onDraw(){}}class u{constructor(t){let s;if(this.previousTimestamp=0,this.animationId=-1,this.scene=new l,this.modifiers=[],s="string"==typeof t?document.querySelector(t):t,null===s)throw new Error("Unable to identify canvas.");this.canvas=s,this.subReset=()=>{};const e=this.canvas.getContext("2d");this.context=e,(t=>{const s={context_reset:h(this.Context)};Object.freeze(s)})()}get Canvas(){return this.canvas}get Context(){return this.context}get Scene(){return this.scene}set Scene(t){t instanceof n&&t.setParent(null),this.scene=t}setSubResetFunction(t){this.subReset=t}resizeCanvas(t){var s,e;t instanceof r?(this.Canvas.width=t.X,this.Canvas.height=t.Y):(this.Canvas.width=null!==(s=null==t?void 0:t.w)&&void 0!==s?s:window.innerWidth,this.Canvas.height=null!==(e=null==t?void 0:t.h)&&void 0!==e?e:window.innerHeight)}start(){this.render(this.previousTimestamp)}stop(){cancelAnimationFrame(this.animationId)}registerModifier(t){t.register(),this.modifiers.push(t)}unregisterModifier(t){this.modifiers=this.modifiers.filter((s=>s===t))}render(t){var s;const e=t-this.previousTimestamp;this.previousTimestamp=t;const i=[];for(const t of this.modifiers)t.Progress<1?t.tick():i.push(t);this.modifiers=this.modifiers.filter((t=>!i.includes(t))),this.context.reset(),this.subReset(this.context),null===(s=this.scene)||void 0===s||s.draw(this.context,e),this.animationId=requestAnimationFrame(this.render.bind(this))}}class c extends i{constructor(t=0,s=0,e=0){super(t,s,e)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}}class m extends i{constructor(t=0,s=0,e=0,i=0){super(t,s,e,i)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}get W(){return this.values[3]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}set W(t){this.values[3]=t}}ArtisticEngine=s})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,