var ArtisticEngine;(()=>{"use strict";var t={d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Engine:()=>a,Entity:()=>r,Sprite:()=>o,Vector:()=>i});var i={};t.r(i),t.d(i,{Vector2D:()=>n,Vector3D:()=>u,Vector4D:()=>c});class s{constructor(...t){this.values=[...t],this.size=t.length}get Size(){return this.size}copy(t,e=!1){if(this.size>t.size&&!e)throw new Error(`Copying vector of size ${this.size} to ${t.size} will cause data loss.\nInclude force option if intended.`);return t.overwrite(this.values),t}isequal(t,e){if(this.size!==t.size)return!1;const i=this.values.slice(),s=t.values.slice();return i.every(((t,i)=>null==e?t==s[i]:t.toFixed(e)==s[i].toFixed(e)))}shift(t=1){t%=this.size;const e=this.values.slice(0,-t);return e.unshift(...this.values.slice(-t)),this.values=e,this}overwrite(t){let e=0;this.values=this.values.map((function(){return t[e++]||0}))}}class n extends s{constructor(t=0,e=0){super(t,e)}get X(){return this.values[0]}get Y(){return this.values[1]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}}class r{constructor(t){var e,i,s,r;this.children=[],this.parent=null,this.dimension=new n,this.position=new n,t&&(this.dimension.X=null!==(e=t.W)&&void 0!==e?e:0,this.dimension.Y=null!==(i=t.H)&&void 0!==i?i:0,this.position.X=null!==(s=t.X)&&void 0!==s?s:0,this.position.Y=null!==(r=t.Y)&&void 0!==r?r:0)}get Position(){return this.position}get X(){return this.position.X}get Y(){return this.position.Y}get AbsoluteX(){var t,e;return(null!==(e=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteX)&&void 0!==e?e:0)+this.position.X}get AbsoluteY(){var t,e;return(null!==(e=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteY)&&void 0!==e?e:0)+this.position.Y}get Dimension(){return this.dimension}get W(){return this.dimension.X}get H(){return this.dimension.Y}get Width(){return this.dimension.X}get Height(){return this.dimension.Y}get Parent(){return this.parent}get Children(){return this.children.slice()}set Position(t){this.position=t}set X(t){this.position.X=t}set Y(t){this.position.Y=t}set Dimension(t){this.dimension=t}set W(t){this.dimension.X=t}set H(t){this.dimension.Y=t}set Width(t){this.dimension.X=t}set Height(t){this.dimension.Y=t}attachChildren(t,e=1/0){var i;let s=-1;if(Array.isArray(t)){const i=Math.max(0,Math.min(e,this.children.length));for(let e=0;e<t.length;e++)s=this.attachChildren(t[e],i+e)}else{for(let e=this;null!==e;e=e.parent)if(e===t)throw new Error("Loop of parent-child relationships detected.");null===(i=t.parent)||void 0===i||i.detachChildren(t),this.children.push(t),t.parent=this,s=this.setChildIndex(t,e)}return s}detachChildren(t){if(Array.isArray(t))for(const e of t)this.detachChildren(e);else{const e=this.children.indexOf(t);e>-1&&(this.children.splice(e,1),t.parent=null)}}getChildIndex(t){return this.children.indexOf(t)}setChildIndex(t,e){const i=this.getChildIndex(t);if(-1===i)throw new Error("I AM NOT YOUR FATHER");this.children.splice(i,1);const s=Math.max(0,Math.min(e,this.children.length));return this.children.splice(s,0,t),s}setParent(t=null){var e;null==t?null===(e=this.parent)||void 0===e||e.detachChildren(this):t.attachChildren(this)}}const h=t=>{if(null!=t.reset)return!0;t.save();let e=0;const i=t.save,s=t.restore;return t.save=function(){i.call(this),e++},t.restore=function(){e>0&&(s.call(this),e--)},t.reset=function(){!function(t){for(let i=e;i>-1;i--)s.call(t);e=-1}(t),this.moveTo(0,0),this.beginPath(),this.closePath(),this.resetTransform(),this.clearRect(0,0,this.canvas.width,this.canvas.height),this.save()},!1};class o extends r{constructor(){super(...arguments),this.draw=(t,e)=>{t.save(),this.region&&(this.beforeClip(t,e),t.beginPath(),t.rect(this.region.AbsoluteX,this.region.AbsoluteY,this.region.Width,this.region.Height),t.clip()),this.onDraw(t,e),t.restore(),this.afterRestore(t,e);for(const i of this.Children)i instanceof o&&i.draw(t,e)}}get Region(){return this.region}get isSelfRegion(){return this.region===this}set Region(t){this.region=t}beforeClip(t,e){}afterRestore(t,e){}}class l extends o{onDraw(){}}class a{constructor(t){let e;if(this.previousTimestamp=0,this.animationId=-1,this.scene=new l,e="string"==typeof t?document.querySelector(t):t,null===e)throw new Error("Unable to identify canvas.");this.canvas=e,this.subReset=()=>{};const i=this.canvas.getContext("2d");this.context=i,(t=>{const e={context_reset:h(this.Context)};Object.freeze(e)})()}get Canvas(){return this.canvas}get Context(){return this.context}get Scene(){return this.scene}set Scene(t){t instanceof r&&t.setParent(null),this.scene=t}setSubResetFunction(t){this.subReset=t}resizeCanvas(t){var e,i;t instanceof n?(this.Canvas.width=t.X,this.Canvas.height=t.Y):(this.Canvas.width=null!==(e=null==t?void 0:t.w)&&void 0!==e?e:window.innerWidth,this.Canvas.height=null!==(i=null==t?void 0:t.h)&&void 0!==i?i:window.innerHeight)}start(){this.render(this.previousTimestamp)}stop(){cancelAnimationFrame(this.animationId)}render(t){var e;const i=t-this.previousTimestamp;this.previousTimestamp=t,this.context.reset(),this.subReset(this.context),null===(e=this.scene)||void 0===e||e.draw(this.context,i),this.animationId=requestAnimationFrame(this.render.bind(this))}}class u extends s{constructor(t=0,e=0,i=0){super(t,e,i)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}}class c extends s{constructor(t=0,e=0,i=0,s=0){super(t,e,i,s)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}get W(){return this.values[3]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}set W(t){this.values[3]=t}}ArtisticEngine=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,