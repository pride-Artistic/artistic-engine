!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.main=e():t.main=e()}(self,(()=>(()=>{"use strict";var t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Engine:()=>m,Entity:()=>o,Scenes:()=>s,Sprite:()=>u,Transform:()=>l,Vector:()=>i});var s={};t.r(s),t.d(s,{BlankScene:()=>c});var i={};t.r(i),t.d(i,{Vector2D:()=>n,Vector3D:()=>d,Vector4D:()=>v});class r{constructor(...t){this.values=[...t],this.size=t.length}get Size(){return this.size}copy(t,e=!1){if(this.size>t.size&&!e)throw new Error(`Copying vector of size ${this.size} to ${t.size} will cause data loss.\nInclude force option if intended.`);return t.overwrite(this.values),t}isequal(t,e){if(this.size!==t.size)return!1;const s=this.values.slice(),i=t.values.slice();return s.every(((t,s)=>null==e?t==i[s]:t.toFixed(e)==i[s].toFixed(e)))}shift(t=1){t%=this.size;const e=this.values.slice(0,-t);return e.unshift(...this.values.slice(-t)),this.values=e,this}overwrite(t){let e=0;this.values=this.values.map((function(){return t[e++]||0}))}}class n extends r{constructor(t=0,e=0){super(t,e)}get X(){return this.values[0]}get Y(){return this.values[1]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}}class h{constructor(){this.children=[],this.parent=null}get Parent(){return this.parent}get Children(){return this.children.slice()}attachChildren(t,e=1/0){var s;let i=-1;if(Array.isArray(t)){const s=Math.max(0,Math.min(e,this.children.length));for(let e=0;e<t.length;e++)i=this.attachChildren(t[e],s+e)}else{for(let e=this;null!==e;e=e.parent)if(e===t)throw new Error("Loop of parent-child relationships detected.");null===(s=t.parent)||void 0===s||s.detachChildren(t),this.children.push(t),t.parent=this,i=this.setChildIndex(t,e)}return i}detachChildren(t){if(Array.isArray(t))for(const e of t)this.detachChildren(e);else{const e=this.children.indexOf(t);e>-1&&(this.children.splice(e,1),t.parent=null)}}getChildIndex(t){return this.children.indexOf(t)}setChildIndex(t,e){const s=this.getChildIndex(t);if(-1===s)throw new Error("I AM NOT YOUR FATHER");this.children.splice(s,1);const i=Math.max(0,Math.min(e,this.children.length));return this.children.splice(i,0,t),i}setParent(t=null){var e;null==t?null===(e=this.parent)||void 0===e||e.detachChildren(this):t.attachChildren(this)}}class o extends h{constructor(t){var e,s,i,r;super(),this.dimension=new n,this.position=new n,t&&(this.dimension.X=null!==(e=t.W)&&void 0!==e?e:0,this.dimension.Y=null!==(s=t.H)&&void 0!==s?s:0,this.position.X=null!==(i=t.X)&&void 0!==i?i:0,this.position.Y=null!==(r=t.Y)&&void 0!==r?r:0)}get Position(){return this.position}get X(){return this.position.X}get Y(){return this.position.Y}get Dimension(){return this.dimension}get W(){return this.dimension.X}get H(){return this.dimension.Y}get Width(){return this.dimension.X}get Height(){return this.dimension.Y}get AbsoluteX(){var t,e;return(null!==(e=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteX)&&void 0!==e?e:0)+this.position.X}get AbsoluteY(){var t,e;return(null!==(e=null===(t=this.parent)||void 0===t?void 0:t.AbsoluteY)&&void 0!==e?e:0)+this.position.Y}set Position(t){this.position=t}set X(t){this.position.X=t}set Y(t){this.position.Y=t}set Dimension(t){this.dimension=t}set W(t){this.dimension.X=t}set H(t){this.dimension.Y=t}set Width(t){this.dimension.X=t}set Height(t){this.dimension.Y=t}}const a=t=>{if(null!=t.reset)return!0;t.save();let e=0;const s=t.save,i=t.restore;return t.save=function(){s.call(this),e++},t.restore=function(){e>0&&(i.call(this),e--)},t.reset=function(){!function(t){for(let s=e;s>-1;s--)i.call(t);e=-1}(t),this.moveTo(0,0),this.beginPath(),this.closePath(),this.resetTransform(),this.clearRect(0,0,this.canvas.width,this.canvas.height),this.save()},!1};class l{constructor(t=1,e=0,s=0,i=1,r=0,n=0){this.values=[t,e,s,i,r,n]}get m11(){return this.values[0]}get m12(){return this.values[1]}get m21(){return this.values[2]}get m22(){return this.values[3]}get ox(){return this.values[4]}get oy(){return this.values[5]}get Determinant(){return this.m11*this.m22-this.m12*this.m21}get isInvertible(){return 0!==this.Determinant}get isIdentity(){return 1===this.m11&&1===this.m22&&0===this.m12&&0===this.m21&&0===this.ox&&0===this.oy}set m11(t){this.values[0]=t}set m12(t){this.values[1]=t}set m21(t){this.values[2]=t}set m22(t){this.values[3]=t}set ox(t){this.values[4]=t}set oy(t){this.values[5]=t}static fromDOM(t){return new this(t.a,t.c,t.b,t.d,t.e,t.f)}translate(t,e){return this.ox+=t,this.oy+=e,this}scale(t,e){return void 0===e?this.scale(t,t):([0,1,4].forEach((e=>{this.values[e]*=t})),[2,3,5].forEach((t=>{this.values[t]*=e})),this)}linear(t,e,s,i,r,n){return this.values=[t*this.m11+e*this.m21,t*this.m12+e*this.m22,s*this.m11+i*this.m21,s*this.m12+i*this.m22,t*this.ox+e*this.oy+r,s*this.ox+i*this.oy+n],this}rotate(t,e=0,s=0){t=t*Math.PI/180;const i=Math.sin(t),r=Math.cos(t);return this.translate(-e,-s).linear(r,i,-i,r,0,0).translate(e,s)}apply(t,e){let s;if(t instanceof n)s=t,e=t.Y,t=t.X,s.X=this.m11*t+this.m12*e+this.ox,s.Y=this.m21*t+this.m22*e+this.oy;else{if(void 0===e)throw new Error("Transform#apply method requires two number parameters or one Vector2D.");s=new n(this.m11*t+this.m12*e+this.ox,this.m21*t+this.m22*e+this.oy)}return s}multiply(t){return this.linear(...t.values)}invert(){const t=this.Determinant;if(0===t)throw new Error("This transform is not invertible");const e=this.m22/t,s=-1*this.m12/t,i=(this.m12*this.oy-this.m22*this.ox)/t,r=-1*this.m21/t,n=this.m11/t,h=-1*(this.m11*this.oy-this.m21*this.ox)/t;return this.m11=e,this.m12=s,this.ox=i,this.m21=r,this.m22=n,this.oy=h,this}skew(t=0,e=0){return this.linear(1,t,e,1,0,0),this}copy(){return new l(...this.values)}toDOM(){return new DOMMatrix([this.m11,this.m21,this.m12,this.m22,this.ox,this.oy])}}class u extends o{constructor(){super(...arguments),this.draw=(t,e)=>{t.save(),t.translate(this.AbsoluteX,this.AbsoluteY),this.transform&&t.transform(this.transform.m11,this.transform.m21,this.transform.m12,this.transform.m22,this.transform.ox,this.transform.oy),this.region&&(this.beforeClip(t,e),t.beginPath(),t.rect(0,0,this.region.Width,this.region.Height),t.clip()),this.onDraw(t,e),t.restore(),this.afterRestore(t,e);for(const s of this.Children)s instanceof u&&s.draw(t,e)}}get Transform(){return this.transform||(this.transform=new l),this.transform}get Region(){return this.region}get isSelfRegion(){return this.region===this}set Transform(t){this.transform=t}set Region(t){this.region=t}beforeClip(t,e){}afterRestore(t,e){}resetTransform(){this.transform=new l}}class c extends u{onDraw(){}}class m{constructor(t){let e;if(this.previousTimestamp=0,this.animationId=-1,this.scene=new c,this.camera=new l,this.modifiers=[],e="string"==typeof t?document.querySelector(t):t,null===e)throw new Error("Unable to identify canvas.");this.canvas=e,this.subReset=()=>{};const s=this.canvas.getContext("2d");this.context=s,(t=>{const e={context_reset:a(this.Context)};Object.freeze(e)})()}get Canvas(){return this.canvas}get Context(){return this.context}get Scene(){return this.scene}get Camera(){return this.camera}set Scene(t){t instanceof o&&t.setParent(null),this.scene=t}set Camera(t){this.camera=t}setSubResetFunction(t){this.subReset=t}resizeCanvas(t){var e,s;t instanceof n?(this.Canvas.width=t.X,this.Canvas.height=t.Y):(this.Canvas.width=null!==(e=null==t?void 0:t.w)&&void 0!==e?e:window.innerWidth,this.Canvas.height=null!==(s=null==t?void 0:t.h)&&void 0!==s?s:window.innerHeight)}start(){this.render(this.previousTimestamp)}stop(){cancelAnimationFrame(this.animationId)}registerModifier(t){t.register(),this.modifiers.push(t)}unregisterModifier(t){this.modifiers=this.modifiers.filter((e=>e!==t))}render(t){var e;const s=t-this.previousTimestamp;this.previousTimestamp=t;const i=[];for(const t of this.modifiers)t.Progress<1?t.tick():i.push(t);this.modifiers=this.modifiers.filter((t=>!i.includes(t))),this.context.reset(),this.subReset(this.context),this.context.transform(this.camera.m11,this.camera.m21,this.camera.m12,this.camera.m22,this.camera.ox,this.camera.oy),null===(e=this.scene)||void 0===e||e.draw(this.context,s),this.animationId=requestAnimationFrame(this.render.bind(this))}}class d extends r{constructor(t=0,e=0,s=0){super(t,e,s)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}}class v extends r{constructor(t=0,e=0,s=0,i=0){super(t,e,s,i)}get X(){return this.values[0]}get Y(){return this.values[1]}get Z(){return this.values[2]}get W(){return this.values[3]}set X(t){this.values[0]=t}set Y(t){this.values[1]=t}set Z(t){this.values[2]=t}set W(t){this.values[3]=t}}return e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,